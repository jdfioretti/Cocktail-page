{"ast":null,"code":"var _jsxFileName = \"/home/javier/Escritorio/react-proyects/Cocktails/src/context.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('a');\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n\n      if (drinks) {\n        const newCocktails = drinks.map(item => {\n          const {\n            idDrink,\n            strDrink,\n            strDrinkThumb,\n            strAlcoholic,\n            strGlass\n          } = item;\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            info: strAlcoholic,\n            glass: strGlass\n          };\n        });\n        setCocktails(newCocktails);\n      } else {\n        setCocktails([]);\n      }\n\n      setLoading(false);\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/home/javier/Escritorio/react-proyects/Cocktails/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","newCocktails","map","item","idDrink","strDrink","strDrinkThumb","strAlcoholic","strGlass","id","name","image","info","glass","error","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,GAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMe,WAAW,GAAG,YAAY;AAC9BL,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,GAAEO,UAAW,EAArB,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAaF,IAAnB;;AAEA,UAAIE,MAAJ,EAAY;AACV,cAAMC,YAAY,GAAGD,MAAM,CAACE,GAAP,CAAYC,IAAD,IAAU;AACxC,gBAAM;AAAEC,YAAAA,OAAF;AAAWC,YAAAA,QAAX;AAAqBC,YAAAA,aAArB;AAAoCC,YAAAA,YAApC;AAAkDC,YAAAA;AAAlD,cAA+DL,IAArE;AAEA,iBAAO;AAAEM,YAAAA,EAAE,EAAEL,OAAN;AAAeM,YAAAA,IAAI,EAAEL,QAArB;AAA+BM,YAAAA,KAAK,EAAEL,aAAtC;AAAqDM,YAAAA,IAAI,EAAEL,YAA3D;AAAyEM,YAAAA,KAAK,EAAEL;AAAhF,WAAP;AACD,SAJoB,CAArB;AAMAd,QAAAA,YAAY,CAACO,YAAD,CAAZ;AAED,OATD,MASO;AACLP,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AAED,KAnBD,CAmBE,OAAOwB,KAAP,EAAc,CACf;AAEF,GAxBD;;AAyBAhC,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACJ,UAAD,CAFM,CAAT;AAIA,sBAAO,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEF,MAAAA,OAAF;AAAWI,MAAAA,SAAX;AAAsBD,MAAAA;AAAtB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoEJ,QAApE,CAAP;AACD,CAnCD,C,CAoCA;;;AACA,OAAO,MAAM2B,gBAAgB,GAAG,MAAM;AACpC,SAAOlC,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s='\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('a');\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true)\n    try {\n      const response = await fetch(`${url}${searchTerm}`)\n      const data = await response.json()\n      const { drinks } = data;\n\n      if (drinks) {\n        const newCocktails = drinks.map((item) => {\n          const { idDrink, strDrink, strDrinkThumb, strAlcoholic, strGlass } = item\n\n          return { id: idDrink, name: strDrink, image: strDrinkThumb, info: strAlcoholic, glass: strGlass }\n        })\n\n        setCocktails(newCocktails)\n\n      } else {\n        setCocktails([])\n      }\n      setLoading(false)\n\n    } catch (error) {\n    }\n\n  }\n  useEffect(() => {\n    fetchDrinks()\n  }, [searchTerm])\n\n  return <AppContext.Provider value={{ loading, cocktails, setSearchTerm }}>{children}</AppContext.Provider>\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}